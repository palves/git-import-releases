#!/bin/bash

set -e

function usage () {
    echo >&$1 \
        "usage: $0 [-h] [--package-list FILE] [--packages-dir PATH]"
}

function make_absolute()
{
    file=$1

    case $file in
	[[\\/]]* | ?:[[\\/]]* )
	    echo "$file" ;;
	*) # Relative name.
	    echo $(pwd)/$file ;;
    esac
}

while [ $# -gt 0 ]
do
    case "$1" in
        --package-list) package_list="$2"; shift ;;
        --packages-dir) packages_dir="$2"; shift ;;
        -h)
            usage 1
            exit 0;;
        --)     shift; break;;
        -*)
            usage 2
            exit 1;;
        *)  break;;     # terminate while loop
    esac
    shift
done

if [ "x$package_list" == "x" ]; then
    usage 2
    exit 1;
fi

if [ "x$packages_dir" == "x" ]; then
    usage 2
    exit 1;
fi

# Make absolute.
package_list=$(make_absolute "$package_list")
packages_dir=$(cd $packages_dir; pwd)

rm -rf src
mkdir src

cd src

git init

tar_opts="--strip-components=1"

# Remove everything, including hidden files (.gdbinit, for example),
# except .git.
cleandir()
{
    # Remove everything from the previous version, including hidden
    # files (.gdbinit, for example), except .git.
    ls -A | while read file; do
	case "$file" in
	    .git)
		;;
	    *)
		rm -rf $file
		;;
	esac
    done
}

while read line; do
    # Skip empty lines.
    [ -z "$line" ] && continue

    # Skip commented out lines.
    [[ $line == \#* ]] && continue

    echo "Importing $line"

    # Remove everything, including hidden files (.gdbinit, for
    # example), except .git.
    cleandir

    # Multiple releases on a single line means unpack all and do a
    # single commit.

    tag=""
    for file in $line; do
	case "$file" in
	    *.tar.bz2)
		tar jxf "$packages_dir/$file" "$tar_opts";
		release=${file%%.tar.bz2}
		;;
	    *.tar.gz)
		tar zxf "$packages_dir/$file" "$tar_opts";
		release=${file%%.tar.gz}
		;;
	    *)
		echo "unknown package format for $file" > 2
		exit 1
		;;
	esac

        # Record author date as the last release on the line's date,
        # and author as the composed tag (the latter to make `git
        # blame' easier to follow).
	date=`stat -c %y "$packages_dir/$file"`

	if [ "$tag" != "" ] ; then
	    tag="$tag+$release"
	else
	    tag="$release"
	fi
    done

    # -A automagically takes care of removing files that disappeared.
    git add -A > /dev/null
    git commit -m "$tag" --date "$date" --author="$tag <gdb@fsf.org>" > /dev/null
    git tag "$tag" > /dev/null
done < $package_list
